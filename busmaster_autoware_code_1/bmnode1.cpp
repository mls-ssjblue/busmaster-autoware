/* This file is generated by BUSMASTER */
/* VERSION [1.2] */
/* BUSMASTER VERSION [2.6.4] */
/* PROTOCOL [CAN] */

/* Start BUSMASTER include header */
#include <Windows.h>
#include <CANIncludes.h>
#include <inttypes.h>
#include <time.h>
#include <ctime>
#include <iostream>
#include <sys/time.h>
#include <stdio.h>
#include <math.h>
#include <exception>

/* End BUSMASTER include header */
/* Start BUSMASTER global variable */
uint8_t i = 0;
int k1,k2 = 0;
float m_lat,m_lon,m_PLato,m_PLo,m_h,m_x,m_y,m_z;
time_t  t;
/* End BUSMASTER global variable */


/* Start BUSMASTER Function Prototype  */
//GCC_EXTERN void GCC_EXPORT OnMsg_All();

GCC_EXTERN void GCC_EXPORT OnError_Active(SCAN_ERR ErrorMsg);
GCC_EXTERN void GCC_EXPORT OnMsgID_102(STCAN_MSG RxMsg);
GCC_EXTERN void GCC_EXPORT OnMsgID_103(STCAN_MSG RxMsg);
/* End BUSMASTER Function Prototype  */


// Error Active Handler which will print error counter values
//and channel number

void OnError_Active(SCAN_ERR ErrorMsg)
{
Trace( "Tx Error: %d Rx Error: %d Channel: %d",
ErrorMsg.m_ucTxError,
ErrorMsg.m_ucRxError,
ErrorMsg.m_ucChannel );
}


void compute(float m_lat, float m_lon,float m_PLato,float m_PLo, float m_h)
{
  Trace("in compute");
    double PS;   //
    double PSo;  //
    double PDL;  //
    double Pt;   //
    double PN;   //
    double PW;   //

    double PB1, PB2, PB3, PB4, PB5, PB6, PB7, PB8, PB9;
    double PA, PB, PC, PD, PE, PF, PG, PH, PI;
    double Pe;   //
    double Pet;  //
    double Pnn;  //
    double AW, FW, Pmo;
    float m_x, m_y, m_z;
    Pmo = 0.9999;

    /*WGS84 Parameters*/
    AW = 6378137.0;            // Semimajor Axis
    FW = 1.0 / 298.257222101;  // 298.257223563 //Geometrical flattening

    Pe = (double)sqrt(2.0 * FW - pow(FW, 2));
    Pet = (double)sqrt(pow(Pe, 2) / (1.0 - pow(Pe, 2)));

    PA = (double)1.0 + 3.0 / 4.0 * pow(Pe, 2) + 45.0 / 64.0 * pow(Pe, 4) + 175.0 / 256.0 * pow(Pe, 6) +
        11025.0 / 16384.0 * pow(Pe, 8) + 43659.0 / 65536.0 * pow(Pe, 10) + 693693.0 / 1048576.0 * pow(Pe, 12) +
        19324305.0 / 29360128.0 * pow(Pe, 14) + 4927697775.0 / 7516192768.0 * pow(Pe, 16);

    PB = (double)3.0 / 4.0 * pow(Pe, 2) + 15.0 / 16.0 * pow(Pe, 4) + 525.0 / 512.0 * pow(Pe, 6) +
        2205.0 / 2048.0 * pow(Pe, 8) + 72765.0 / 65536.0 * pow(Pe, 10) + 297297.0 / 262144.0 * pow(Pe, 12) +
        135270135.0 / 117440512.0 * pow(Pe, 14) + 547521975.0 / 469762048.0 * pow(Pe, 16);

    PC = (double)15.0 / 64.0 * pow(Pe, 4) + 105.0 / 256.0 * pow(Pe, 6) + 2205.0 / 4096.0 * pow(Pe, 8) +
        10395.0 / 16384.0 * pow(Pe, 10) + 1486485.0 / 2097152.0 * pow(Pe, 12) + 45090045.0 / 58720256.0 * pow(Pe, 14) +
        766530765.0 / 939524096.0 * pow(Pe, 16);

    PD = (double)35.0 / 512.0 * pow(Pe, 6) + 315.0 / 2048.0 * pow(Pe, 8) + 31185.0 / 131072.0 * pow(Pe, 10) +
        165165.0 / 524288.0 * pow(Pe, 12) + 45090045.0 / 117440512.0 * pow(Pe, 14) +
        209053845.0 / 469762048.0 * pow(Pe, 16);

    PE = (double)315.0 / 16384.0 * pow(Pe, 8) + 3465.0 / 65536.0 * pow(Pe, 10) + 99099.0 / 1048576.0 * pow(Pe, 12) +
        4099095.0 / 29360128.0 * pow(Pe, 14) + 348423075.0 / 1879048192.0 * pow(Pe, 16);

    PF = (double)693.0 / 131072.0 * pow(Pe, 10) + 9009.0 / 524288.0 * pow(Pe, 12) +
        4099095.0 / 117440512.0 * pow(Pe, 14) + 26801775.0 / 469762048.0 * pow(Pe, 16);

    PG = (double)3003.0 / 2097152.0 * pow(Pe, 12) + 315315.0 / 58720256.0 * pow(Pe, 14) +
        11486475.0 / 939524096.0 * pow(Pe, 16);

    PH = (double)45045.0 / 117440512.0 * pow(Pe, 14) + 765765.0 / 469762048.0 * pow(Pe, 16);

    PI = (double)765765.0 / 7516192768.0 * pow(Pe, 16);

    PB1 = (double)AW * (1.0 - pow(Pe, 2)) * PA;
    PB2 = (double)AW * (1.0 - pow(Pe, 2)) * PB / -2.0;
    PB3 = (double)AW * (1.0 - pow(Pe, 2)) * PC / 4.0;
    PB4 = (double)AW * (1.0 - pow(Pe, 2)) * PD / -6.0;
    PB5 = (double)AW * (1.0 - pow(Pe, 2)) * PE / 8.0;
    PB6 = (double)AW * (1.0 - pow(Pe, 2)) * PF / -10.0;
    PB7 = (double)AW * (1.0 - pow(Pe, 2)) * PG / 12.0;
    PB8 = (double)AW * (1.0 - pow(Pe, 2)) * PH / -14.0;
    PB9 = (double)AW * (1.0 - pow(Pe, 2)) * PI / 16.0;

    PS = (double)PB1 * m_lat + PB2 * sin(2.0 * m_lat) + PB3 * sin(4.0 * m_lat) + PB4 * sin(6.0 * m_lat) +
        PB5 * sin(8.0 * m_lat) + PB6 * sin(10.0 * m_lat) + PB7 * sin(12.0 * m_lat) + PB8 * sin(14.0 * m_lat) +
        PB9 * sin(16.0 * m_lat);

    PSo = (double)PB1 * m_PLato + PB2 * sin(2.0 * m_PLato) + PB3 * sin(4.0 * m_PLato) + PB4 * sin(6.0 * m_PLato) +
          PB5 * sin(8.0 * m_PLato) + PB6 * sin(10.0 * m_PLato) + PB7 * sin(12.0 * m_PLato) + PB8 * sin(14.0 * m_PLato) +
          PB9 * sin(16.0 * m_PLato);

    PDL = (double)m_lon - m_PLo;
    Pt = (double)tan(m_lat);
    PW = (double)sqrt(1.0 - pow(Pe, 2) * pow(sin(m_lat), 2));
    PN = (double)AW / PW;
    Pnn = (double)sqrt(pow(Pet, 2) * pow(cos(m_lat), 2));

    m_x = (float)(((PS - PSo) + (1.0 / 2.0) * PN * pow(cos(m_lat), 2.0) * Pt * pow(PDL, 2.0) +
                  (1.0 / 24.0) * PN * pow(cos(m_lat), 4) * Pt *
                      (5.0 - pow(Pt, 2) + 9.0 * pow(Pnn, 2) + 4.0 * pow(Pnn, 4)) * pow(PDL, 4) -
                  (1.0 / 720.0) * PN * pow(cos(m_lat), 6) * Pt *
                      (-61.0 + 58.0 * pow(Pt, 2) - pow(Pt, 4) - 270.0 * pow(Pnn, 2) + 330.0 * pow(Pt, 2) * pow(Pnn, 2)) *
                      pow(PDL, 6) -
                  (1.0 / 40320.0) * PN * pow(cos(m_lat), 8) * Pt *
                      (-1385.0 + 3111 * pow(Pt, 2) - 543 * pow(Pt, 4) + pow(Pt, 6)) * pow(PDL, 8)) *
          Pmo);

    m_y = (float)((PN * cos(m_lat) * PDL -
                  1.0 / 6.0 * PN * pow(cos(m_lat), 3) * (-1 + pow(Pt, 2) - pow(Pnn, 2)) * pow(PDL, 3) -
                  1.0 / 120.0 * PN * pow(cos(m_lat), 5) *
                      (-5.0 + 18.0 * pow(Pt, 2) - pow(Pt, 4) - 14.0 * pow(Pnn, 2) + 58.0 * pow(Pt, 2) * pow(Pnn, 2)) *
                      pow(PDL, 5) -
                  1.0 / 5040.0 * PN * pow(cos(m_lat), 7) *
                      (-61.0 + 479.0 * pow(Pt, 2) - 179.0 * pow(Pt, 4) + pow(Pt, 6)) * pow(PDL, 7)) *
          Pmo);

    m_z = (float)m_h;
  //Send result back to bm_server
  STCAN_MSG sMsgStruct;
  sMsgStruct.id = 0x101;
  sMsgStruct.dlc = 8;
  sMsgStruct.cluster = 1;
  memcpy(sMsgStruct.data, &m_x, sizeof(float));
  Trace("2.1Sending m_x = %f",m_x);
  SendMsg(sMsgStruct);
  free(sMsgStruct.data);
  memcpy(sMsgStruct.data, &m_y, sizeof(float));
  Trace("2.2Sending m_y = %f", m_y);
  SendMsg(sMsgStruct);
  free(sMsgStruct.data);
  memcpy(sMsgStruct.data, &m_z, sizeof(float));
  Trace("2.3Sending m_z = %f", m_z);
  SendMsg(sMsgStruct);
  Trace("Sent all values");
  free(sMsgStruct.data);
}

/* Start BUSMASTER generated function - OnMsgID_102 */
void OnMsgID_102(STCAN_MSG RxMsg)
{
  k1++;
  //float rec_val = 0.0;
  float rec_val1, rec_val2;
if(k1 == 1){
  memcpy(&rec_val1, &RxMsg.data[0], sizeof(float));
  memcpy(&rec_val2, &RxMsg.data[4], sizeof(float));
  m_lat = rec_val1;
  m_lon = rec_val2;
  free(&rec_val1);
  free(&rec_val2);
}
else if(k1 == 2){
  memcpy(&rec_val1, &RxMsg.data[0], sizeof(float));
  memcpy(&rec_val2, &RxMsg.data[4], sizeof(float));
  m_PLato = rec_val1;
  m_PLo = rec_val2;
  free(&rec_val1);
  free(&rec_val2);
}
else if(k1 == 3){
  k1=0;
  memcpy(&rec_val1, &RxMsg.data[0], sizeof(float));
  m_h = rec_val1;
  Trace("m_lat, m_lon, m_PLato, m_PLo, m_h  = %f, %f, %f, %f, %f",m_lat,m_lon,m_PLato,m_PLo,m_h);
  free(&rec_val1);
  compute(m_lat,m_lon,m_PLato,m_PLo,m_h);
}
  // memcpy(&rec_val_array[2], &RxMsg.data[8], sizeof(float));
  // memcpy(&rec_val_array[3], &RxMsg.data[12], sizeof(float));
  // memcpy(&rec_val_array[4], &RxMsg.data[16], sizeof(float));
  //Trace("2.Received message %d =  %f",k1, rec_val);
 
  //Trace("2.computing with latd,lond,h = %f %f %f ",latd,lond,h);
  //  if(k1==1){
  //   m_lat = rec_val;
  //   free(&rec_val);
  // }
  // else if(k1==2){
  //   m_lon = rec_val;
  //   free(&rec_val);
  // }
  // else if(k1==3){
  //   k1=0;
  //   m_PLato = rec_val;
  //   free(&rec_val);
  // }
  

 
}/* End BUSMASTER generated function - OnMsgID_102 */
/* Start BUSMASTER generated function - OnMsgID_103 */
void OnMsgID_103(STCAN_MSG RxMsg)
{
/* TODO */
  k2++;
  float rec_val = 0.0;
  memcpy(&rec_val, RxMsg.data, sizeof(float));
  Trace("2.Received message %d =  %f",k2+3, rec_val);
  if(k2==1){
    m_PLo= rec_val;
    free(&rec_val);
  }
  else if(k2==2){
    m_h = rec_val;
    k2=0;
    free(&rec_val);
    //Trace("2.computing with m_lat,m_lon,m_Plato,m_PLo, m_h = %f %f %f %f %f",
    // m_lat,m_lon,m_PLato,m_PLo,m_h);
    compute(m_lat,m_lon,m_PLato,m_PLo,m_h);
    Trace("after compute");
    
    Trace("after free");
  }
}/* End BUSMASTER generated function - OnMsgID_103 */
