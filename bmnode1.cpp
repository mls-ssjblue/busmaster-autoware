/* This file is generated by BUSMASTER */
/* VERSION [1.2] */
/* BUSMASTER VERSION [2.6.4] */
/* PROTOCOL [CAN] */

/* Start BUSMASTER include header */
#include <Windows.h>
#include <CANIncludes.h>
#include <inttypes.h>
#include <time.h>
#include <ctime>
#include <iostream>
#include <sys/time.h>
#include <stdio.h>
#include <math.h>


/* End BUSMASTER include header */
/* Start BUSMASTER global variable */
uint8_t i = 0;
int j = 0;
float latd,lond,h,lat,lad,lod,lon,m_lat,m_lon,m_h;
time_t  t;

/* End BUSMASTER global variable */


/* Start BUSMASTER Function Prototype  */
GCC_EXTERN void GCC_EXPORT OnTimer_timer_1000ms_1000( );
//GCC_EXTERN void GCC_EXPORT OnMsg_All();

GCC_EXTERN void GCC_EXPORT OnMsg_All(STCAN_MSG RxMsg);
GCC_EXTERN void GCC_EXPORT OnMsgID_100(STCAN_MSG RxMsg);
/* End BUSMASTER Function Prototype  */

/* Start BUSMASTER Function Wrapper Prototype  */
/* End BUSMASTER Function Wrapper Prototype  */

/* Start BUSMASTER Function Wrapper Prototype  */
/* End BUSMASTER Function Wrapper Prototype  */


/* Start BUSMASTER generated function - OnTimer_timer_100ms_100 */
void OnTimer_timer_1000ms_1000( )
{
	STCAN_MSG sMsgStruct;
	sMsgStruct.id = 0x100;
	sMsgStruct.dlc = 1;
	sMsgStruct.cluster = 2;
	sMsgStruct.data[0] = i % 100;
	//Trace("... Transmitting message ...");
	//Trace("Tx msg = %d", i);
	++i;
	t = time(0);
	char* dt = ctime(&t);
	struct timeval tp;
	gettimeofday(&tp,NULL);
	long long int ms = (long long int)tp.tv_sec * 1000 + tp.tv_usec / 1000 ;
	long long int us = (long long int)tp.tv_sec * 1000000 + tp.tv_usec;
	
	// Trace("time=%s",dt);
	// Trace("tsec=%u",tp.tv_sec);
	//Trace("tusec=%u",tp.tv_usec);
	//Trace("ms=%llu",ms);
	//Trace("us=%llu",us);
	//SendMsg(sMsgStruct);
}/* End BUSMASTER generated function - OnTimer_timer_100ms_100 */


// void OnMsgIDRange_100_110(STCAN_MSG RxMsg)
// {
// /* TODO */
// /* TODO: Define and Initialise the following variables*/
// /* UINT ReturnValue ;*/
// /* char* Para1 ;*/
// /* ... Para2 ;*/
// Trace("....Received Message.....");
// int j;
// int i;
// int RxBuff[8];
// int dataLength = 1;
// struct timeval tp1;
// gettimeofday(&tp1,NULL);
// long long int ms = (long long int)tp1.tv_sec * 1000 + tp1.tv_usec / 1000;
// long long int us = (long long int)tp1.tv_sec * 1000000 + tp1.tv_usec;

// Trace("ms=%llu",ms);
// Trace("us=%llu",us);

//  for(i=0;i<dataLength;i++)
//  {
//      RxBuff[i]= RxMsg.byteAt(i); //RxMsg.data[i];
//  }
//  for(j=0;j<dataLength;j++)
//  {
// 	Trace("Rx data[%d] = %d",j,RxBuff[j]);
//  }
// }


/* End BUSMASTER generated function - OnMsgIDRange_100_105 */



// Error Active Handler which will print error counter values
//and channel number


void OnError_Active(SCAN_ERR ErrorMsg)
{
Trace( "Tx Error: %d Rx Error: %d Channel: %d",
ErrorMsg.m_ucTxError,
ErrorMsg.m_ucRxError,
ErrorMsg.m_ucChannel );

}



/* Start BUSMASTER generated function - OnMsg_All */
void OnMsg_All(STCAN_MSG RxMsg)
{
// /* TODO */
// int i,j;
// int RxBuff[8];
// int dataLength = 1;
// struct timeval tp1;
// long long int ms = (long long int)tp1.tv_sec * 1000 + tp1.tv_usec / 1000;
// long long int us = (long long int)tp1.tv_sec * 1000000 + tp1.tv_usec;
// 	Trace("ms=%llu",ms);
// Trace("us=%llu",us);

//  for(i=0;i<dataLength;i++)
//  {
//      RxBuff[i]= RxMsg.byteAt(i); //RxMsg.data[i];
//  }
//  for(j=0;j<dataLength;j++)
//  {
// 	Trace("Rx data[%d] = %d",j,RxBuff[j]);
//  }
}/* End BUSMASTER generated function - OnMsg_All */


double compute(float latd,float lond, float h)
{
  
  float lat, lad, lod, lon, m_lat, m_lon, m_h;

  lad = floor(latd / 100.);
  lat = latd - lad * 100.;
  lod = floor(lond / 100.);
  lon = lond - lod * 100.;
  // Changing Longitude and Latitude to Radians
  m_lat = (lad + lat / 60.0) * M_PI / 180;
  m_lon = (lod + lon / 60.0) * M_PI / 180;
  m_h = h;
  Trace("m_lat = %f", m_lat);
  Trace("m_lon = %f", m_lon);
  Trace("m_h = %f", m_h);
  //return all three values
  //Send result back to bm_server
  STCAN_MSG sMsgStruct;
	sMsgStruct.id = 0x101;
	sMsgStruct.dlc = 12;
	sMsgStruct.cluster = 1;
	memcpy(&sMsgStruct.data, &m_lat, sizeof(float));
	Trace("Sending m_lat to bm_server");
	SendMsg(sMsgStruct);
	memcpy(&sMsgStruct.data, &m_lon, sizeof(float));
	Trace("Sending m_lon to bm_server");
	SendMsg(sMsgStruct);
	memcpy(&sMsgStruct.data, &m_h, sizeof(float));
	Trace("Sending m_h to bm_server");
	SendMsg(sMsgStruct);
}


/* Start BUSMASTER generated function - OnMsgID_100 */
void OnMsgID_100(STCAN_MSG RxMsg)
{
	/* TODO *///
	float rec_val = 0.0;
	memcpy(&rec_val,RxMsg.data,sizeof(float));
	Trace("2.Received message from bm_server - %f", rec_val);

	if(j ==0){
		latd = rec_val;
	}
	else if(j==1){
		lond = rec_val;
	}
	else if(j==2){
		h = rec_val;
		j=0;
		compute(latd,lond,h);
	}
	j++;
	int i;
	int RxBuff[8];
	int dataLength = 1;
	struct timeval tp1;
	long long int ms = (long long int)tp1.tv_sec * 1000 + tp1.tv_usec / 1000;
	long long int us = (long long int)tp1.tv_sec * 1000000 + tp1.tv_usec;
		//Trace("ms=%llu",ms);
	//Trace("us=%llu",us);///

	 // for(i=0;i<dataLength;i++)
	 // {
	 //     RxBuff[i]= RxMsg.byteAt(i); //RxMsg.data[i];
	 // }
	 // for(j=0;j<dataLength;j++)
	 // {
		// Trace("Rx data[%d] = %f",j,RxBuff[j]);
	 // }
	// STCAN_MSG sMsgStruct;
	// sMsgStruct.id = 0x101;
	// sMsgStruct.dlc = 12;
	// sMsgStruct.cluster = 1;
	// sMsgStruct.data[0] = (float)RxMsg.data[0];
	// sMsgStruct.data[1] = (float)RxMsg.data[1];
	// sMsgStruct.data[2] = (float)RxMsg.data[2];
	// sMsgStruct.float_data[0] = RxMsg.float_data[0];
	// Trace("Sending message to bm_server");
	// SendMsg(sMsgStruct);
}/* End BUSMASTER generated function - OnMsgID_100 */
